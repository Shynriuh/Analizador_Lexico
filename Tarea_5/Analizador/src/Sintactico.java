import java.util.Stack;
import java.util.ArrayList;

public class Sintactico {
	ArrayList<Token> lista_token = new ArrayList<Token>();
	Stack<String> arbol = new Stack<String>();
	String[][] matriz_s = new String[80][3];
	int m=0;
	
	//Constructor parametrizado
	public Sintactico(ArrayList<Token> lista_token) {
		this.lista_token = lista_token;
		
		//Se llena la matriz
		for(int i=0; i<matriz_s.length; i++) {	//m.length almacena las filas
			for(int j=0; j<matriz_s[i].length; j++) {	//m[i].length cantidad de elementos de la fila
				matriz_s[i][j] = "";
			}
		}
	}
	
	public boolean LR_1_2() {
		
		int[][] tablaLR = {
				{0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,1,2,3,4,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,0,7,3,4,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,-5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,-8,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,-11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{-7,0,0,0,-7,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,-7,-7,-7,0,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,-8,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,-9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,-13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,-10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{27,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,-16,0,28,29,30,0,0,0,0,0,25,0,0,0,0,0,23,24,0,26,0,0,0,0,0,0,31,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{27,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,-16,0,28,29,30,0,0,0,0,0,25,0,0,0,0,0,34,24,0,26,0,0,0,0,0,0,31,0,0},
				{-18,0,0,0,-18,0,0,0,0,0,0,0,0,0,0,0,0,-18,0,-18,-18,-18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{-19,0,0,0,-19,0,0,0,0,0,0,0,0,0,0,0,0,-19,0,-19,-19,-19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{46,47,48,49,0,42,0,0,0,0,43,0,-30,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,44,45,0,40},
				{0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{46,47,48,49,0,42,0,0,0,0,43,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,52},
				{46,47,48,49,0,42,0,0,0,0,43,0,0,0,41,-32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,44,45,0,54},
				{46,47,48,49,0,42,0,0,0,0,43,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,55},
				{46,47,48,49,0,42,0,0,0,0,43,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,56},
				{0,0,0,0,0,0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,59,58,60,63,62,0,61,-31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{46,47,48,49,0,42,0,0,0,0,43,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,64},
				{46,47,48,49,0,42,0,0,0,0,43,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,65},
				{46,47,48,49,0,42,0,0,0,0,43,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,66},
				{0,0,0,0,0,-53,-53,-53,-53,-53,0,-53,-53,-53,0,-53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,-36,-36,-36,-36,-36,0,-36,-36,-36,0,-36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,-37,-37,-37,-37,-37,0,-37,-37,-37,36,-37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,-38,-38,-38,-38,-38,0,-38,-38,-38,0,-38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,-39,-39,-39,-39,-39,0,-39,-39,-39,0,-39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,-40,-40,-40,-40,-40,0,-40,-40,-40,0,-40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{-26,0,0,0,-26,0,0,0,0,0,0,0,0,0,0,0,0,-26,0,-26,-26,-26,-26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,-13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,59,58,60,63,62,0,61,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,59,58,60,63,62,0,61,0,71,0,-34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,0},
				{0,0,0,0,0,59,58,60,63,62,0,61,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,59,58,60,63,62,0,61,0,0,0,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{-25,0,0,0,-25,0,0,0,0,0,0,0,0,0,0,0,0,-25,0,-25,-25,-25,-25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{46,47,48,49,0,42,0,0,0,0,43,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,74},
				{46,47,48,49,0,42,0,0,0,0,43,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,75},
				{46,47,48,49,0,42,0,0,0,0,43,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,76},
				{46,47,48,49,0,42,0,0,0,0,43,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,77},
				{46,47,48,49,0,42,0,0,0,0,43,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,78},
				{46,47,48,49,0,42,0,0,0,0,43,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,79},
				{0,0,0,0,0,59,58,60,63,62,0,61,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,-45,-45,-45,-45,-45,0,-45,-45,-45,0,-45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,-46,-46,-46,-46,-46,0,-46,-46,-46,0,-46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{-22,0,0,0,-22,0,0,0,0,0,0,0,0,0,0,0,0,-22,0,-22,-22,-22,-22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,-41,-41,-41,-41,-41,0,-41,-41,-41,0,-41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{46,47,48,49,0,42,0,0,0,0,43,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,81},
				{27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,0,28,29,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,84,0,0,0,0,31,82,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0},
				{0,0,0,0,0,-47,-47,-47,-47,-47,0,-47,-47,-47,0,-47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,-48,58,-48,-48,-48,0,-48,-48,-48,0,-48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,59,58,-49,-49,-49,0,-49,-49,-49,0,-49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,59,58,60,-50,-50,0,-50,-50,-50,0,-50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,59,58,60,-51,-51,0,61,-51,-51,0,-51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,59,58,60,-52,62,0,61,-52,-52,0,-52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,-44,-44,-44,-44,-44,0,-44,-44,-44,0,-44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,59,58,60,63,62,0,61,0,71,0,-34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,0},
				{-27,0,0,0,-27,0,0,0,0,0,0,0,0,0,0,0,0,-27,0,-27,-27,-27,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0},
				{-42,0,0,0,-42,0,0,0,0,0,0,0,0,0,0,0,0,-42,0,-42,-42,-42,-42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{-43,0,0,0,-43,0,0,0,0,0,0,0,0,0,0,0,0,-43,0,-43,-43,-43,-43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-20,0,28,29,30,0,0,0,0,0,0,0,0,0,0,0,0,0,90,91,0,0,0,0,0,0,31,0,0},
				{-24,0,0,0,-24,0,0,0,0,0,0,0,0,0,0,0,0,-24,0,-24,-24,-24,-24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{-23,0,0,0,-23,0,0,0,0,0,0,0,0,0,0,0,0,-23,0,-23,-23,-23,-23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,0,28,29,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,84,0,0,0,0,31,92,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-20,0,28,29,30,0,0,0,0,0,0,0,0,0,0,0,0,0,94,91,0,0,0,0,0,0,31,0,0},
				{-28,0,0,0,-28,0,0,0,0,0,0,0,0,0,0,0,0,-28,0,-28,-28,-28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{-29,0,0,0,-29,0,0,0,0,0,0,0,0,0,0,0,0,-29,0,-29,-29,-29,-29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
		};
		
		Stack<String> pila = new Stack<String>();
		int fila, columna, accion, borrar=0, i=0;
		String regla="", datos="";
		
		//Inicio
		lista_token.add(new Token("$", 23, "Pesos"));
		pila.push("$");
		pila.push("0"); //La pila inicia con un 0
		
		fila = Integer.parseInt(pila.peek()); //Se obtiene el valor de la pila
		columna = lista_token.get(0).getNumero_token();	//Se obtiene el valor del token
		accion =  tablaLR[fila][columna];	//Se determina el valor de la accion
		
		for(String p : pila) //Se guarda la pila en un string
			datos = datos+p;
		//Y se guarda en la matriz
		matriz_s[m][0]=datos; //Columna pila
		if(accion>0) //Columna Salida
			matriz_s[m][1]="D"+accion; //Se guarda el desplazamiento
		else
			matriz_s[m][1]="R"+((accion*(-1))-1); //Se guarda la regla
		datos = "";
			
		while(accion != 0) {
				
			if(accion > 0) {
				
				//Se realiza un desplazamiento
				pila.push(lista_token.get(i).getLexema());
				
				arbol.push(lista_token.get(i).getTipo() + " " + pila.peek()); //Se guarda en el arbol sintactico
				matriz_s[m][2]=pila.peek(); //Columna entrada
				m++;
				
				pila.push(Integer.toString(accion));
				
				//Se obtiene el valor de la pila y se determina la accion
				fila = Integer.parseInt(pila.peek()); //Se obtiene el valor de la pila
				columna = lista_token.get(i+1).getNumero_token();	//Se obtiene el valor del token
				accion =  tablaLR[fila][columna];	//Se determina el valor de la accion
				
				for(String p : pila) //Se guarda la pila en un string
					datos = datos+p;
				//Y se guarda en la matriz
				matriz_s[m][0]=datos; //Columna pila
				if(accion>0) //Columna Salida
					matriz_s[m][1]="D"+accion; //Se guarda el desplazamiento
				else
					matriz_s[m][1]="R"+((accion*(-1))-1); //Se guarda la regla
				datos = "";
				
			}
			else if(accion < 0) {	//Se realiza una reduccion
					
				if(accion == -2){ //Si es r1 se acepta la cadena
					matriz_s[m][2]="ACEPTADO";
					return true;
				}
				else if(accion == -3) { //Si es R2
					borrar = 0;
					columna= 25;
					regla="Definiciones";
				} else if(accion == -4) { //Si es R3
					borrar = 4;
					columna= 25;
					regla="Definiciones";
				} else if(accion == -5) { 
					borrar = 2;
					columna= 26;
					regla="Definicion";
				} else if(accion == -6) { 
					borrar = 2;
					columna= 26;
					regla="Definicion";
				} else if(accion == -7) { 
					borrar = 8;
					columna= 27;
					regla="DefVar";
				} else if(accion == -8) { 
					borrar = 0;
					columna= 28;
					regla="ListaVar";
				} else if(accion == -9) { 
					borrar = 6;
					columna= 28;
					regla="ListaVar";
				} else if(accion == -10) { 
					borrar = 12;
					columna= 29;
					regla="DefFunc";
				} else if(accion == -11) { 
					borrar = 0;
					columna= 30;
					regla="Parametros";
				} else if(accion == -12) { 
					borrar = 6;
					columna= 30;
					regla="Parametros";
				} else if(accion == -13) { 
					borrar = 0;
					columna= 31;
					regla="ListaParam";
				} else if(accion == -14) { 
					borrar = 8;
					columna= 31;
					regla="ListaParam";
				} else if(accion == -15) { 
					borrar = 6;
					columna= 32;
					regla="BloqFunc";
				} else if(accion == -16) { 
					borrar = 0;
					columna= 33;
					regla="DefLocales";
				} else if(accion == -17) { 
					borrar = 4;
					columna= 33;
					regla="DefLocales";
				} else if(accion == -18) { 
					borrar = 2;
					columna= 34;
					regla="DefLocal";
				} else if(accion == -19) { 
					borrar = 2;
					columna= 34;
					regla="DefLocal";
				} else if(accion == -20) { 
					borrar = 0;
					columna= 35;
					regla="Sentencias";
				} else if(accion == -21) { 
					borrar = 4;
					columna= 35;
					regla="Sentencias";
				} else if(accion == -22) { 
					borrar = 8;
					columna= 36;
					regla="Sentencia";
				} else if(accion == -23) { 
					borrar = 12;
					columna= 36;
					regla="Sentencia";
				} else if(accion == -24) { 
					borrar = 10;
					columna= 36;
					regla="Sentencia";
				} else if(accion == -25) { 
					borrar = 6;
					columna= 36;
					regla="Sentencia";
				} else if(accion == -26) { 
					borrar = 4;
					columna= 36;
					regla="Sentencia";
				} else if(accion == -27) { 
					borrar = 0;
					columna= 37;
					regla="Otro";
				} else if(accion == -28) { 
					borrar = 4;
					columna= 37;
					regla="Otro";
				} else if(accion == -29) { 
					borrar = 6;
					columna= 38;
					regla="Bloque";
				} else if(accion == -30) { 
					borrar = 0;
					columna= 39;
					regla="ValorRegresa";
				} else if(accion == -31) { 
					borrar = 2;
					columna= 39;
					regla="ValorRegresa";
				} else if(accion == -32) { 
					borrar = 0;
					columna= 40;
					regla="Argumentos";
				} else if(accion == -33) { 
					borrar = 4;
					columna= 40;
					regla="Argumentos";
				} else if(accion == -34) { 
					borrar = 0;
					columna= 41;
					regla="ListaArgumentos";
				} else if(accion == -35) { 
					borrar = 6;
					columna= 41;
					regla="ListaArgumentos";
				} else if(accion == -36) { 
					borrar = 2;
					columna= 42;
					regla="Termino";
				} else if(accion == -37) { 
					borrar = 2;
					columna= 42;
					regla="Termino";
				} else if(accion == -38) { 
					borrar = 2;
					columna= 42;
					regla="Termino";
				} else if(accion == -39) { 
					borrar = 2;
					columna= 42;
					regla="Termino";
				} else if(accion == -40) { 
					borrar = 2;
					columna= 42;
					regla="Termino";
				} else if(accion == -41) { 
					borrar = 8;
					columna= 43;
					regla="LlamadaFunc";
				} else if(accion == -42) { 
					borrar = 2;
					columna= 44;
					regla="SentenciaBloque";
				} else if(accion == -43) { 
					borrar = 2;
					columna= 44;
					regla="SentenciaBloque";
				} else if(accion == -44) { 
					borrar = 6;
					columna= 45;
					regla="Expresion";
				} else if(accion == -45) { 
					borrar = 4;
					columna= 45;
					regla="Expresion";
				} else if(accion == -46) { 
					borrar = 4;
					columna= 45;
					regla="Expresion";
				} else if(accion == -47) { 
					borrar = 6;
					columna= 45;
					regla="Expresion";
				} else if(accion == -48) { 
					borrar = 6;
					columna= 45;
					regla="Expresion";
				} else if(accion == -49) { 
					borrar = 6;
					columna= 45;
					regla="Expresion";
				} else if(accion == -50) { 
					borrar = 6;
					columna= 45;
					regla="Expresion";
				} else if(accion == -51) { 
					borrar = 6;
					columna= 45;
					regla="Expresion";
				} else if(accion == -52) { 
					borrar = 6;
					columna= 45;
					regla="Expresion";
				} else if(accion == -53) {
					borrar = 2;
					columna= 45;
					regla="Expresion";
				}
					
				//Se reduce la pila E veces
				for(int j=0; j<borrar; j++) {
					pila.pop();
				}
				
				matriz_s[m][2]=lista_token.get(i).getLexema(); //Columna entrada
				m++;
					
				//Se ingresa la accion y la regla a la pila
				fila = Integer.parseInt(pila.peek()); //Se obtiene el valor de la pila
				accion =  tablaLR[fila][columna];	//Se determina el valor de la accion
				pila.push(regla);
				arbol.push(pila.peek()); //Se guarda en el arbol
				pila.push(Integer.toString(accion));

				fila = Integer.parseInt(pila.peek()); //Se obtiene el valor de la pila
				columna = lista_token.get(i).getNumero_token();	//Se obtiene el valor del token
				accion =  tablaLR[fila][columna];	//Se determina el valor de la accion
				i--;
				
				for(String p : pila) //Se guarda la pila en un string
					datos = datos+p;
				//Y se guarda en la matriz
				matriz_s[m][0]=datos; //Columna pila
				if(accion>0) //Columna Salida
					matriz_s[m][1]="D"+accion; //Se guarda el desplazamiento
				else
					matriz_s[m][1]="R"+((accion*(-1))-1); //Se guarda la regla
				datos = "";
				
			}
			else if(accion == 0) {
				matriz_s[m][2]="RECHAZADO";
				return false;
			}
			
			if(i<lista_token.size()-1)
				i++;
		}
		matriz_s[m][2]="RECHAZADO";
		return false;
	}
	
	public String[][] matriz_sintactica() {
		return matriz_s;
	}
	
	public Stack<String> getArbol() {
		return arbol;
	}

}

